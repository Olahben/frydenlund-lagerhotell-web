@page "/bestill/{storageUnitId}"

@inject StorageUnitService _storageUnitService
@inject NavigationManager _navigationManager
@inject SessionService _sessionService
@inject WarehouseHotelService _warehouseHotelService
@inject UserService _userService
@inject AuthStateProviderService _customAuthenticationStateProvider

@using System.Security.Claims

<MudContainer Style="max-width: 740px; padding: 16px;">
    <MudGrid Justify="Justify.Center" Style="">
        <MudText Style="font-weight: 400;" Typo="Typo.h2">Din bestilling</MudText>
        @if (currentOrder != null)
        {
            <MovingInDate RelevantOrder=@currentOrder />
            <Insurance RelevantOrder=@currentOrder />
            <OrderConfirmation IsUserAuthenticated=@authorized RelevantWarehouseHotel=@relevantWarehouseHotel RelevantOrder=@currentOrder RelevantStorageUnit=@relevantStorageUnit />
        }
    </MudGrid>
</MudContainer>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    [Parameter]
    public string StorageUnitId { get; set; }
    string userAccessToken;
    StorageUnit relevantStorageUnit = new StorageUnit();
    LagerhotellAPI.Models.DomainModels.Order currentOrder;
    OrderValidator orderValidator = new();
    private WarehouseHotel relevantWarehouseHotel = new()
        {
            Address = new Address(),
            Coordinate = new Coordinate(),
            StorageUnitsSizes = new StorageUnitSizes(),
            OpeningHours = new OpeningHours()
        };
    private bool authorized = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var userOrCompanyUser = await _customAuthenticationStateProvider.GetUser();
            if (userOrCompanyUser.User.FirstName != null)
            {
                authorized = true;
                string userId = userOrCompanyUser.User.Id;
                currentOrder = new LagerhotellAPI.Models.DomainModels.Order("", userId, StorageUnitId, new OrderPeriod() { OrderDate = DateTime.Now }, OrderStatus.NotCreated, OrderInsurance.FiftyThousand, "");
            } else if (userOrCompanyUser.CompanyUser.FirstName != null)
            {
                authorized = true;
                string userId = userOrCompanyUser.CompanyUser.CompanyUserId;
                currentOrder = new LagerhotellAPI.Models.DomainModels.Order("", userId, StorageUnitId, new OrderPeriod() { OrderDate = DateTime.Now }, OrderStatus.NotCreated, OrderInsurance.FiftyThousand, "");
            }
            else
            {
                Snackbar.Add("Du må være logget inn for å bestille", MudBlazor.Severity.Warning, config =>
                {
                    config.Action = "Logg inn";
                    config.ActionColor = Color.Primary;
                    config.CloseAfterNavigation = true;
                    config.Onclick = (Snackbar) => Task.Run(() => _navigationManager.NavigateTo("/logg-inn"));
                });
            }
            relevantStorageUnit = await _storageUnitService.GetStorageUnit(StorageUnitId, userAccessToken);
            relevantWarehouseHotel = await _warehouseHotelService.GetWarehouseHotel(relevantStorageUnit.WarehouseHotelId);
        }
        catch (KeyNotFoundException e)
        {
            Console.WriteLine($"{e}");
        }
        catch (Exception e)
        {
            Console.WriteLine($"{e}");
        }
    }
}
